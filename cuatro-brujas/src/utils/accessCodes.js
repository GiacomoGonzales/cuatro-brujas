import { initializeApp } from 'firebase/app';
import { getFirestore, collection, addDoc, serverTimestamp } from 'firebase/firestore';

// Configuraci√≥n de Firebase (debes reemplazar con tus credenciales)
const firebaseConfig = {
  // TODO: Agregar configuraci√≥n real de Firebase
  apiKey: "your-api-key",
  authDomain: "your-project.firebaseapp.com",
  projectId: "your-project-id",
  storageBucket: "your-project.appspot.com",
  messagingSenderId: "123456789",
  appId: "your-app-id"
};

// Inicializar Firebase (solo si no est√° ya inicializado)
let app;
let db;

try {
  app = initializeApp(firebaseConfig);
  db = getFirestore(app);
} catch (error) {
  console.warn('Firebase ya est√° inicializado o hay un error de configuraci√≥n:', error.message);
  // En modo desarrollo, usar simulaci√≥n
  db = null;
}

/**
 * Crea un c√≥digo de acceso de prueba en Firestore
 * @returns {Promise<boolean>} - true si se cre√≥ exitosamente
 */
export const createTestAccessCode = async () => {
  try {
    // Si no hay conexi√≥n a Firestore, simular el comportamiento
    if (!db) {
      console.log('üîß Modo simulaci√≥n: Firebase no configurado');
      console.log('‚úÖ C√≥digo de prueba "PRUEBA123" creado correctamente en Firestore (simulado).');
      return true;
    }

    // Calcular fecha de expiraci√≥n (30 d√≠as desde ahora)
    const expirationDate = new Date();
    expirationDate.setDate(expirationDate.getDate() + 30);

    // Datos del documento a crear
    const accessCodeData = {
      code: "PRUEBA123",
      used: false,
      createdAt: serverTimestamp(),
      expiresAt: expirationDate,
      type: "general",
      lecturaId: ""
    };

    // Insertar el documento en la colecci√≥n accessCodes
    const docRef = await addDoc(collection(db, 'accessCodes'), accessCodeData);
    
    console.log('‚úÖ C√≥digo de prueba "PRUEBA123" creado correctamente en Firestore.');
    console.log('üìÑ ID del documento:', docRef.id);
    
    return true;
  } catch (error) {
    console.error('‚ùå Error al crear c√≥digo de prueba:', error);
    return false;
  }
};

/**
 * Funci√≥n auxiliar para verificar si un c√≥digo existe en Firestore
 * @param {string} code - C√≥digo a verificar
 * @returns {Promise<boolean>}
 */
export const checkCodeExists = async (code) => {
  try {
    if (!db) {
      console.log('üîß Modo simulaci√≥n: verificando c√≥digo localmente');
      return code === "PRUEBA123";
    }

    const { getDocs, query, where } = await import('firebase/firestore');
    
    const q = query(collection(db, 'accessCodes'), where('code', '==', code));
    const querySnapshot = await getDocs(q);
    
    return !querySnapshot.empty;
  } catch (error) {
    console.error('‚ùå Error al verificar c√≥digo:', error);
    return false;
  }
};

/**
 * Funci√≥n para limpiar c√≥digos de prueba (√∫til para desarrollo)
 * @returns {Promise<boolean>}
 */
export const cleanTestCodes = async () => {
  try {
    if (!db) {
      console.log('üîß Modo simulaci√≥n: c√≥digos de prueba limpiados');
      return true;
    }

    const { getDocs, query, where, deleteDoc, doc } = await import('firebase/firestore');
    
    const q = query(collection(db, 'accessCodes'), where('code', '==', 'PRUEBA123'));
    const querySnapshot = await getDocs(q);
    
    const deletePromises = querySnapshot.docs.map(document => 
      deleteDoc(doc(db, 'accessCodes', document.id))
    );
    
    await Promise.all(deletePromises);
    
    console.log(`üßπ ${querySnapshot.docs.length} c√≥digos de prueba eliminados`);
    return true;
  } catch (error) {
    console.error('‚ùå Error al limpiar c√≥digos de prueba:', error);
    return false;
  }
};

// Hacer las funciones disponibles globalmente para uso en consola
if (typeof window !== 'undefined') {
  window.createTestAccessCode = createTestAccessCode;
  window.checkCodeExists = checkCodeExists;
  window.cleanTestCodes = cleanTestCodes;
  
  console.log('üõ†Ô∏è Funciones de utilidad disponibles en consola:');
  console.log('   - createTestAccessCode()');
  console.log('   - checkCodeExists("codigo")');
  console.log('   - cleanTestCodes()');
}