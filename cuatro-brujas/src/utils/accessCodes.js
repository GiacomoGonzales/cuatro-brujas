// Firebase no est√° configurado actualmente - usando modo simulaci√≥n
// Cuando se configure Firebase, descomentar las importaciones necesarias

// Simulaci√≥n para desarrollo sin Firebase
const db = null;

/**
 * Crea un c√≥digo de acceso de prueba en Firestore
 * @returns {Promise<boolean>} - true si se cre√≥ exitosamente
 */
export const createTestAccessCode = async () => {
  try {
    // Si no hay conexi√≥n a Firestore, simular el comportamiento
    if (!db) {
      console.log('üîß Modo simulaci√≥n: Firebase no configurado');
      console.log('‚úÖ C√≥digo de prueba "PRUEBA123" creado correctamente en Firestore (simulado).');
      return true;
    }

    // Calcular fecha de expiraci√≥n (30 d√≠as desde ahora)
    const expirationDate = new Date();
    expirationDate.setDate(expirationDate.getDate() + 30);

    // Simulaci√≥n de datos para desarrollo
    const accessCodeData = {
      code: "PRUEBA123",
      used: false,
      createdAt: new Date(),
      expiresAt: expirationDate,
      type: "general",
      lecturaId: ""
    };

    // Simulaci√≥n de inserci√≥n en modo desarrollo
    console.log('Simulando inserci√≥n:', accessCodeData);
    
    console.log('‚úÖ C√≥digo de prueba "PRUEBA123" creado correctamente en Firestore (simulado).');
    console.log('üìÑ ID del documento: simulado-123');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error al crear c√≥digo de prueba:', error);
    return false;
  }
};

/**
 * Funci√≥n auxiliar para verificar si un c√≥digo existe en Firestore
 * @param {string} code - C√≥digo a verificar
 * @returns {Promise<boolean>}
 */
export const checkCodeExists = async (code) => {
  try {
    if (!db) {
      console.log('üîß Modo simulaci√≥n: verificando c√≥digo localmente');
      return code === "PRUEBA123";
    }

    // Simulaci√≥n para desarrollo sin Firebase
    console.log('Simulando verificaci√≥n de c√≥digo:', code);
    return code === "PRUEBA123";
  } catch (error) {
    console.error('‚ùå Error al verificar c√≥digo:', error);
    return false;
  }
};

/**
 * Funci√≥n para limpiar c√≥digos de prueba (√∫til para desarrollo)
 * @returns {Promise<boolean>}
 */
export const cleanTestCodes = async () => {
  try {
    if (!db) {
      console.log('üîß Modo simulaci√≥n: c√≥digos de prueba limpiados');
      return true;
    }

    // Simulaci√≥n para desarrollo sin Firebase
    console.log('üßπ Simulando limpieza de c√≥digos de prueba');
    console.log('üßπ 1 c√≥digo de prueba eliminado (simulado)');
    return true;
  } catch (error) {
    console.error('‚ùå Error al limpiar c√≥digos de prueba:', error);
    return false;
  }
};

// Hacer las funciones disponibles globalmente para uso en consola
if (typeof window !== 'undefined') {
  window.createTestAccessCode = createTestAccessCode;
  window.checkCodeExists = checkCodeExists;
  window.cleanTestCodes = cleanTestCodes;
  
  console.log('üõ†Ô∏è Funciones de utilidad disponibles en consola:');
  console.log('   - createTestAccessCode()');
  console.log('   - checkCodeExists("codigo")');
  console.log('   - cleanTestCodes()');
}